(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,u=b["".concat(r,".").concat(m)]||b[m]||h[m]||o;return n?i.a.createElement(u,s(s({ref:t},l),{},{components:n})):i.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),o=(n(0),n(118)),r={id:"publishing",title:"Publishing Packages",sidebar_label:"Publishing Packages",hide_table_of_contents:!1},s={unversionedId:"packages/npm/publishing",id:"packages/npm/publishing",isDocsHomePage:!1,title:"Publishing Packages",description:"\u26a0\ufe0f IMPORTANT: all packages are versioned and published using",source:"@site/docs/packages/npm/publishing.md",slug:"/packages/npm/publishing",permalink:"/stacks/docs/packages/npm/publishing",editUrl:"https://github.com/amido/stacks/docs/packages/npm/publishing.md",version:"current",sidebar_label:"Publishing Packages",sidebar:"docs",previous:{title:"Packages",permalink:"/stacks/docs/packages/packages"},next:{title:"CLI (Command Line Interface)",permalink:"/stacks/docs/packages/npm/scaffolding-cli/cli_process"}},c=[{value:"How to bump the version on a package and publish",id:"how-to-bump-the-version-on-a-package-and-publish",children:[]},{value:"The registry being used",id:"the-registry-being-used",children:[]},{value:"Accessing the registry in order to publish",id:"accessing-the-registry-in-order-to-publish",children:[]},{value:"Our packages",id:"our-packages",children:[]},{value:"Package registry",id:"package-registry",children:[]},{value:"Package management",id:"package-management",children:[]},{value:"Automated package publishing",id:"automated-package-publishing",children:[{value:"Version bumps require manual commit",id:"version-bumps-require-manual-commit",children:[]},{value:"The reasoning behind automated publishing",id:"the-reasoning-behind-automated-publishing",children:[]}]},{value:"Versioning",id:"versioning",children:[{value:"What <code>version</code> does",id:"what-version-does",children:[]},{value:"Why we use <code>lerna version --conventional-commits</code>",id:"why-we-use-lerna-version---conventional-commits",children:[]},{value:"Why we use <code>--no-git-tag-version</code>",id:"why-we-use---no-git-tag-version",children:[]},{value:"Why we use <code>--no-push</code>",id:"why-we-use---no-push",children:[]}]},{value:"Conventional commits",id:"conventional-commits",children:[{value:"Definition of a commit",id:"definition-of-a-commit",children:[]},{value:"Why we are using Conventional Commits",id:"why-we-are-using-conventional-commits",children:[]},{value:"How we enforce Conventional Commits",id:"how-we-enforce-conventional-commits",children:[]},{value:"The commit conventions format",id:"the-commit-conventions-format",children:[]}]},{value:"Publishing",id:"publishing",children:[{value:"What <code>publish</code> does",id:"what-publish-does",children:[]},{value:"What happens in CI",id:"what-happens-in-ci",children:[]},{value:"Why we use <code>lerna publish from-package</code>",id:"why-we-use-lerna-publish-from-package",children:[]}]},{value:"Lessons learnt with Lerna",id:"lessons-learnt-with-lerna",children:[]},{value:"FAQ",id:"faq",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"\u26a0\ufe0f IMPORTANT: all packages are versioned and published using\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://lernajs.io"}),"Lerna"),", as defined by scripts at the root of the\nrepository. Please do not version packages manually in their package\ndirectories."),Object(o.b)("h2",{id:"how-to-bump-the-version-on-a-package-and-publish"},"How to bump the version on a package and publish"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Make changes and commit them to origin/branch"),Object(o.b)("li",{parentName:"ol"},"Ensure your ",Object(o.b)("inlineCode",{parentName:"li"},"git status")," is porcelian"),Object(o.b)("li",{parentName:"ol"},"On your ",Object(o.b)("em",{parentName:"li"},"local")," machine at the root of the repo (executing the\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"../package.json"}),"version script"),"): ",Object(o.b)("inlineCode",{parentName:"li"},"npm run version")),Object(o.b)("li",{parentName:"ol"},"Commit the automatically generated changes"),Object(o.b)("li",{parentName:"ol"},"Raise a PR to origin/master"),Object(o.b)("li",{parentName:"ol"},"The CI pipeline will then publish the changes for you")),Object(o.b)("h2",{id:"the-registry-being-used"},"The registry being used"),Object(o.b)("p",null,"All of our packages are open-source and can be found under the @amidostacks\norganisation on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/settings/amidostacks/packages"}),"npm"),"."),Object(o.b)("h2",{id:"accessing-the-registry-in-order-to-publish"},"Accessing the registry in order to publish"),Object(o.b)("p",null,"The CI pipeline will publish for you. If you have maintainer access to the\nGithub repo then you can commit your changes with the version bump, and let the\npipeline do the rest (if it passes all the tests that is)."),Object(o.b)("h2",{id:"our-packages"},"Our packages"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"stacks-webapp-template")," is a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/stacks/docs/workloads/frontend/monorepo"}),"monorepo"),", meaning it is divided\ninto independent sub-packages."),Object(o.b)("p",null,"These packages can be found in the packages/ directory:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"packages/\n  elint-config/\n  template-cli/\n  pact-config\n")),Object(o.b)("h2",{id:"package-registry"},"Package registry"),Object(o.b)("p",null,"All our packages are publicly available from ",Object(o.b)("inlineCode",{parentName:"p"},"npm"),":\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/org/amidostacks"}),"https://www.npmjs.com/org/amidostacks")),Object(o.b)("h2",{id:"package-management"},"Package management"),Object(o.b)("p",null,"We are following in the footsteps of\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/create-react-app"}),"create-react-app")," and using\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://lernajs.io"}),"Lerna")," which can be installed using\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/lerna"}),"npm"),"."),Object(o.b)("p",null,"Lerna is configured to publish all changes in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../packages"}),"packages")," once any\nchanges have passed the pipeline gates as defined in\n",Object(o.b)("inlineCode",{parentName:"p"},"[build/azDevOps/azure](build/azDevOps/azure/)"),". Note that it's then up the\nconsumers of the packages to update their versions as needed."),Object(o.b)("h2",{id:"automated-package-publishing"},"Automated package publishing"),Object(o.b)("p",null,"Lerna is embedded as a step in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/stacks/docs/workloads/frontend/monorepo"}),"monorepo")," pipeline. Check out\nthe pipeline step\n",Object(o.b)("inlineCode",{parentName:"p"},"[publish-packages-lerna.yml](./build/azDevOps/azure/templates/steps/publish-packages-lerna.yml)"),"\nfor more information on how this is done."),Object(o.b)("p",null,"This automates the following process:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"the version is bumped from the conventional commits ",Object(o.b)("inlineCode",{parentName:"li"},"npm run version")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"package.json")," version is changed"),Object(o.b)("li",{parentName:"ol"},"the changes are to be merged to master (CHANGELOG.md, version in packages)"),Object(o.b)("li",{parentName:"ol"},"in the pipeline, this triggers lerna to look for difference in package\nversion and the registry"),Object(o.b)("li",{parentName:"ol"},"if changes are found the packages are published to the configured registry")),Object(o.b)("h3",{id:"version-bumps-require-manual-commit"},"Version bumps require manual commit"),Object(o.b)("p",null,"This is because we think it's up the the developers to ensure that they want to bump the\nversion, based on their commit history."),Object(o.b)("h3",{id:"the-reasoning-behind-automated-publishing"},"The reasoning behind automated publishing"),Object(o.b)("p",null,"We think it's good practice to test changes before publishing it to our\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/settings/amidostacks/packages"}),"public npm registry"),". so\nyou know it's free of errors. We only publish from master in the pipeline."),Object(o.b)("h2",{id:"versioning"},"Versioning"),Object(o.b)("p",null,"We are versioning as a separate script in order to support publishing from a CI\npipeline, and to automate the creation of changelogs based on the commit\nhistory."),Object(o.b)("p",null,"From root, run: ",Object(o.b)("inlineCode",{parentName:"p"},"npm run version")),Object(o.b)("h3",{id:"what-version-does"},"What ",Object(o.b)("inlineCode",{parentName:"h3"},"version")," does"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Identifies packages that have been updated since the previous tagged release."),Object(o.b)("li",{parentName:"ol"},"Bumps the version based on the Conventional Commits Specification"),Object(o.b)("li",{parentName:"ol"},"Updates CHANGELOG.md and updates the package.json if needed")),Object(o.b)("p",null,"The changes are then ready to be committed to the remote."),Object(o.b)("h3",{id:"why-we-use-lerna-version---conventional-commits"},"Why we use ",Object(o.b)("inlineCode",{parentName:"h3"},"lerna version --conventional-commits")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"When run with this flag, lerna version will use the Conventional Commits\nSpecification to determine the version bump and generate CHANGELOG.md files.\n","[2][2]",":\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lerna/lerna/tree/master/commands/version#--conventional-commits"}),"https://github.com/lerna/lerna/tree/master/commands/version#--conventional-commits"))),Object(o.b)("h3",{id:"why-we-use---no-git-tag-version"},"Why we use ",Object(o.b)("inlineCode",{parentName:"h3"},"--no-git-tag-version")),Object(o.b)("p",null,"By default, lerna version will commit changes to package.json files and tag the\nrelease. Since we are publishing ",Object(o.b)("inlineCode",{parentName:"p"},"from-package")," and doing so in the pipeline, we\nwould rather suggest creating a separate Github release task that would run on\nsuccessful Lerna publishing to the registry."),Object(o.b)("h3",{id:"why-we-use---no-push"},"Why we use ",Object(o.b)("inlineCode",{parentName:"h3"},"--no-push")),Object(o.b)("p",null,"By default, lerna version will push the committed and tagged changes to the\nconfigured git remote. We disable this to ensure that the changelog and version\nbumps are obvious on local, and it's up to the develop to commit them to their\nworking branch."),Object(o.b)("h2",{id:"conventional-commits"},"Conventional commits"),Object(o.b)("p",null,"We generate our CHANGELOG.md automagically based on the ",Object(o.b)("inlineCode",{parentName:"p"},"git commit"),". The\ncommit itself communicates the ",Object(o.b)("strong",{parentName:"p"},"WHAT"),", whereas commit message communicates the\n",Object(o.b)("strong",{parentName:"p"},"WHY"),"."),Object(o.b)("h3",{id:"definition-of-a-commit"},"Definition of a commit"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://git-scm.com/docs/git-commit"}),Object(o.b)("inlineCode",{parentName:"a"},"git commit"))," is a git command that is\nused to record your changes to the local repository."),Object(o.b)("h3",{id:"why-we-are-using-conventional-commits"},"Why we are using Conventional Commits"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Automatically generating CHANGELOGs."),Object(o.b)("li",{parentName:"ul"},"Automatically determining a semantic version bump (based on the types of\ncommits landed)."),Object(o.b)("li",{parentName:"ul"},"Communicating the nature of changes to teammates, the public, and other\nstakeholders."),Object(o.b)("li",{parentName:"ul"},"Triggering publish processes."),Object(o.b)("li",{parentName:"ul"},"Making it easier for people to contribute to your projects, by allowing them\nto explore a more structured commit history.")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Source:\n",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://www.conventionalcommits.org/en/v1.0.0/#why-use-conventional-commits"}),"https://www.conventionalcommits.org/en/v1.0.0/#why-use-conventional-commits"))),Object(o.b)("h3",{id:"how-we-enforce-conventional-commits"},"How we enforce Conventional Commits"),Object(o.b)("p",null,"We use pre-commit hooks with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/typicode/husky"}),"Husky")," and\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/conventional-changelog/commitlint"}),"commitlint"),"."),Object(o.b)("h3",{id:"the-commit-conventions-format"},"The commit conventions format"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"type(scope?): subject")),Object(o.b)("p",null,"Where:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional#type-enum"}),Object(o.b)("inlineCode",{parentName:"a"},"'type'="))),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),";[\n  'build',\n  'ci',\n  'chore',\n  'docs',\n  'feat',\n  'fix',\n  'perf',\n  'refactor',\n  'revert',\n  'style',\n  'test',\n]\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"scope?=")," optional, addresses the specific area of change, or feature")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"subject=")," why you are making the commit in the first place"))),Object(o.b)("p",null,"Examples: ",Object(o.b)("inlineCode",{parentName:"p"},"chore: to run tests on travis ci")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"fix(server): to send cors headers")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"feat(blog): to add comment section")),Object(o.b)("h2",{id:"publishing"},"Publishing"),Object(o.b)("p",null,"From root, run: ",Object(o.b)("inlineCode",{parentName:"p"},"npm run publish")),Object(o.b)("h3",{id:"what-publish-does"},"What ",Object(o.b)("inlineCode",{parentName:"h3"},"publish")," does"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"explicitly publish packages where the latest version is not present in the\nregistry (from-package).")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},'Lerna will never publish packages which are marked as private ("private": true\nin the package.json).')),Object(o.b)("h3",{id:"what-happens-in-ci"},"What happens in CI"),Object(o.b)("p",null,"We check if the package version is up to date with the registry. If it's a head,\nthen we publish the changes."),Object(o.b)("h3",{id:"why-we-use-lerna-publish-from-package"},"Why we use ",Object(o.b)("inlineCode",{parentName:"h3"},"lerna publish from-package")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"keyword except the list of packages to publish is determined by inspecting\neach ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," and determining if any package version is not present in\nthe registry. Any versions not present in the registry will be published. This\nis useful when a previous lerna publish failed to publish all packages to the\nregistry. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/lerna/lerna/tree/master/commands/publish#bump-from-package"}),"1"))),Object(o.b)("h2",{id:"lessons-learnt-with-lerna"},"Lessons learnt with Lerna"),Object(o.b)("p",null,"We have encountered a lot of issues while using Lerna for versioning and\npublishing in a pipeline. Namely the following:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Lerna expects master to be unprotected protected and able to push to it -\n",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/lerna/lerna/issues/1957"}),"https://github.com/lerna/lerna/issues/1957")),Object(o.b)("li",{parentName:"ol"},"When using ",Object(o.b)("inlineCode",{parentName:"li"},"from-package")," the GitHead SHA needs to be committed POST\npublishing to a registry. This requires the publish task in the pipeline to\ncommit this to master."),Object(o.b)("li",{parentName:"ol"},"When using ",Object(o.b)("inlineCode",{parentName:"li"},"from-package")," the Git Tag needs to be committed POST publishing to\nregistry. This requires custom tasks for tagging releases."),Object(o.b)("li",{parentName:"ol"},"Lerna cannot version or publish in a detached HEAD state, making pipeline\nversioning and publishing really hard."),Object(o.b)("li",{parentName:"ol"},"It should probably just be done locally...")),Object(o.b)("h2",{id:"faq"},"FAQ"),Object(o.b)("p",null,"Q: What happens if the pipeline fails with error about working tree with uncommitted changes?\nA: If you see the following error in the logs on the ",Object(o.b)("inlineCode",{parentName:"p"},"Publish: Publish packages using lerna")," task:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-log"}),"lerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove the following changes before continuing:\nlerna ERR! EUNCOMMIT  M package-lock.json\n")),Object(o.b)("p",null,"This could mean that that the monorepo root ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," and ",Object(o.b)("inlineCode",{parentName:"p"},"package-lock.json")," are out of sync on ",Object(o.b)("inlineCode",{parentName:"p"},"master")," branch. Try deleting the ",Object(o.b)("inlineCode",{parentName:"p"},"package-lock.json")," and re-installing dependencies, and test then the new lock file."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"stacks-webapp-template $ rm package-lock.json\nstacks-webapp-template $ npm install\n")))}p.isMDXComponent=!0}}]);