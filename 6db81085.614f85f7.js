(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{150:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),s=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),p=r,f=d["".concat(c,".").concat(p)]||d[p]||b[p]||a;return n?o.a.createElement(f,i(i({ref:t},u),{},{components:n})):o.a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var u=2;u<a;u++)c[u]=n[u];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},151:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},156:function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)(void 0);t.a=o},157:function(e,t,n){"use strict";var r=n(0),o=n(156);t.a=function(){var e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},159:function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(157),c=n(151),i=n(47),l=n.n(i),u=37,s=39;t.a=function(e){var t=e.block,n=e.children,i=e.defaultValue,d=e.values,b=e.groupId,p=Object(a.a)(),f=p.tabGroupChoices,m=p.setTabGroupChoices,O=Object(r.useState)(i),h=O[0],j=O[1],g=Object(r.useState)(!1),y=g[0],v=g[1];if(null!=b){var x=f[b];null!=x&&x!==h&&d.some((function(e){return e.value===x}))&&j(x)}var w=function(e){j(e),null!=b&&m(b,e)},k=[],_=function(e){e.metaKey||e.altKey||e.ctrlKey||v(!0)},C=function(){v(!1)};return Object(r.useEffect)((function(){window.addEventListener("keydown",_),window.addEventListener("mousedown",C)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t})},d.map((function(e){var t=e.value,n=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(c.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case s:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case u:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(k,e.target,e),_(e)},onFocus:function(){return w(t)},onClick:function(){w(t),v(!1)},onPointerDown:function(){return v(!1)}},n)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===h}))[0]))}},160:function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=function(e){return o.a.createElement("div",null,e.children)}},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var r=n(2),o=n(6),a=(n(0),n(150)),c=n(159),i=n(160),l={id:"build_and_run_project_netcore",title:"Build & Run",sidebar_label:"Build & Run the Project"},u={unversionedId:"workloads/netcore/quickstart/build_and_run_project_netcore",id:"workloads/netcore/quickstart/build_and_run_project_netcore",isDocsHomePage:!1,title:"Build & Run",description:"Build locally",source:"@site/docs/workloads/netcore/quickstart/build_and_run_project_netcore.md",slug:"/workloads/netcore/quickstart/build_and_run_project_netcore",permalink:"/stacks/docs/workloads/netcore/quickstart/build_and_run_project_netcore",editUrl:"https://github.com/amido/stacks/docs/workloads/netcore/quickstart/build_and_run_project_netcore.md",version:"current",sidebar_label:"Build & Run the Project",sidebar:"docs",previous:{title:"Configure the project",permalink:"/stacks/docs/workloads/netcore/quickstart/configure_project_netcore"},next:{title:"Functional testing",permalink:"/stacks/docs/workloads/netcore/quickstart/testing/functional_testing_netcore"}},s=[{value:"Build locally",id:"build-locally",children:[{value:"Verify that the application has started",id:"verify-that-the-application-has-started",children:[]}]},{value:"Build using docker container",id:"build-using-docker-container",children:[]}],d={rightToc:s};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"build-locally"},"Build locally"),Object(a.b)("p",null,"Move to the ",Object(a.b)("inlineCode",{parentName:"p"},"<PROJECT-NAME>/src/api")," folder, then"),Object(a.b)(c.a,{groupId:"operating-systems",defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"windows",mdxType:"TabItem"},"dotnet restore",Object(a.b)("br",null),"dotnet clean",Object(a.b)("br",null),"dotnet build",Object(a.b)("br",null),"dotnet run --project xxAMIDOxx.xxSTACKSxx.API/xxAMIDOxx.xxSTACKSxx.API.csproj"),Object(a.b)(i.a,{value:"linux",mdxType:"TabItem"},"export COSMOSDB_KEY=${COSMOSDB_KEY}",Object(a.b)("br",null),Object(a.b)("br",null),"dotnet restore",Object(a.b)("br",null),"dotnet clean",Object(a.b)("br",null),"dotnet build",Object(a.b)("br",null),"dotnet run --project xxAMIDOxx.xxSTACKSxx.API/xxAMIDOxx.xxSTACKSxx.API.csproj")),Object(a.b)("br",null),Object(a.b)("br",null),Object(a.b)("h3",{id:"verify-that-the-application-has-started"},"Verify that the application has started"),Object(a.b)("p",null,"Browse to ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://localhost:5000/v1/menu"}),"http://localhost:5000/v1/menu"),". This should return a valid JSON response."),Object(a.b)("p",null,"The application configuration uses Swagger/OAS3 to represent the API endpoints. The Swagger UI can be viewed by directing your\nbrowser to ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://localhost:5000/swagger/index.html"}),"http://localhost:5000/swagger/index.html"),"."),Object(a.b)("h2",{id:"build-using-docker-container"},"Build using docker container"),Object(a.b)("p",null,"From the ",Object(a.b)("inlineCode",{parentName:"p"},"<PROJECT-NAME>/src/api")," folder, build a Docker image using e.g. the command below:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text",metastring:'title="Build docker image command"',title:'"Build',docker:!0,image:!0,'command"':!0}),"docker build -t dotnet-api .\n")),Object(a.b)("p",null,"This uses the ",Object(a.b)("inlineCode",{parentName:"p"},"Dockerfile")," in this folder to generate the Docker image."),Object(a.b)("p",null,"Once the Docker image is created, you can then run a Docker container based on this image using e.g."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text",metastring:'title="Run docker container command"',title:'"Run',docker:!0,container:!0,'command"':!0}),"docker run -p 5000:80 --mount type=bind,source=/path/to/PROJECT-NAME/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json,target=/app/config/appsettings.json -e COSMOSDB_KEY=your-key dotnet-api:latest`\n")),Object(a.b)("p",null,"where the ",Object(a.b)("inlineCode",{parentName:"p"},"COSMOSDB_KEY")," is the value as described above. Note that the ",Object(a.b)("inlineCode",{parentName:"p"},"appsettings.json")," value is mounted here for running locally,\nbut not if the full project is deployed to Azure, where the build process will perform the substitution."))}b.isMDXComponent=!0}}]);