(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{127:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),s=n(6),r=(n(0),n(138)),i={id:"testing",title:"Testing and Quality",sidebar_label:"Testing and quality",hide_table_of_contents:!1},o={unversionedId:"testing/testing",id:"testing/testing",isDocsHomePage:!1,title:"Testing and Quality",description:"Overview",source:"@site/docs/testing/testing.md",slug:"/testing/testing",permalink:"/stacks/docs/testing/testing",editUrl:"https://github.com/amido/stacks/docs/testing/testing.md",version:"current",sidebar_label:"Testing and quality",sidebar:"docs",previous:{title:"Pipeline Templates",permalink:"/stacks/docs/infrastructure/azure/pipeline_templates"},next:{title:"Project Types - Testing",permalink:"/stacks/docs/testing/cli_testing_frameworks"}},c=[{value:"Overview",id:"overview",children:[{value:"Pre-commit tests",id:"pre-commit-tests",children:[]},{value:"Pre-deployment tests",id:"pre-deployment-tests",children:[]},{value:"Post-deployment tests",id:"post-deployment-tests",children:[]}]},{value:"Quality gates",id:"quality-gates",children:[{value:"Jest: Unit, component and snapshot testing",id:"jest-unit-component-and-snapshot-testing",children:[]},{value:"Java Application: Unit, functional and smoke testing",id:"java-application-unit-functional-and-smoke-testing",children:[]},{value:"Scripts",id:"scripts",children:[]}]},{value:"Cypress: Functional tests",id:"cypress-functional-tests",children:[{value:"Why Cypress is categorised in the pre-deployed tests",id:"why-cypress-is-categorised-in-the-pre-deployed-tests",children:[]},{value:"How Cypress is run in Continuous Integration (CI) pipelines",id:"how-cypress-is-run-in-continuous-integration-ci-pipelines",children:[]},{value:"How to use Cypress",id:"how-to-use-cypress",children:[]},{value:"How to use Cypress while developing",id:"how-to-use-cypress-while-developing",children:[]},{value:"How to run all the tests without keeping the server running",id:"how-to-run-all-the-tests-without-keeping-the-server-running",children:[]},{value:"Where tests should be located",id:"where-tests-should-be-located",children:[]},{value:"How to configure the environments",id:"how-to-configure-the-environments",children:[]}]},{value:"Axe: Accessibility testing",id:"axe-accessibility-testing",children:[{value:"Cypress: Debugging Axe failures",id:"cypress-debugging-axe-failures",children:[]}]},{value:"Applitools: Visual tests",id:"applitools-visual-tests",children:[{value:"Getting started",id:"getting-started",children:[]},{value:"How to run the tests locally",id:"how-to-run-the-tests-locally",children:[]},{value:"Where Applitools tests should be located",id:"where-applitools-tests-should-be-located",children:[]}]},{value:"Static analysis",id:"static-analysis",children:[]},{value:"Consumer-Driven contract testing with Pact",id:"consumer-driven-contract-testing-with-pact",children:[{value:"<code>[Utils](./utils)</code>",id:"utilsutils",children:[]},{value:"Pact stub service",id:"pact-stub-service",children:[]},{value:"&#39;Can I Deploy&#39;",id:"can-i-deploy",children:[]},{value:"Pact working example",id:"pact-working-example",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Tests where possible will be written and delivered as part of the same branch and feature. Where this is not possible, in the event of using a standalone repo or the alternative, we expect the same development and code reviews standards to be upheld, and the branch naming to be aligned with the development branch name as possible."),Object(r.b)("h3",{id:"pre-commit-tests"},"Pre-commit tests"),Object(r.b)("p",null,"To be run on the local active develop branch, before commit. Before committing changes, we suggest enforcing and running pre-commit tests with a pre-commit hook."),Object(r.b)("h3",{id:"pre-deployment-tests"},"Pre-deployment tests"),Object(r.b)("p",null,"To be run on the active development branch.\nAfter which, we have two different processes, one for pre-deployment tests (unit, snapshot, integration), and another for post-deployment (functional tests).  Pre-deployment tests can run on the fly whilst coding. This is enabled by using a \u2018watch-mode\u2019 which will check for code changes, compile/trans-compile, and run the tests against the web app."),Object(r.b)("h3",{id:"post-deployment-tests"},"Post-deployment tests"),Object(r.b)("p",null,"To be run on master once the pull request (PR) has been approved and passed all pre-deployment tests."),Object(r.b)("h2",{id:"quality-gates"},"Quality gates"),Object(r.b)("p",null,"The following demonstrates the series of quality gates that the web app must pass through in order to successfully be deployed to a user facing environment (production)."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://www.lucidchart.com/publicSegments/view/2094f5d4-eaca-417c-a51e-36bf79853373/image.png",alt:"alt text",title:"Quality Gates"}))),Object(r.b)("h3",{id:"jest-unit-component-and-snapshot-testing"},"Jest: Unit, component and snapshot testing"),Object(r.b)("p",null,"We are using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/"}),"Jest")," for running all unit, component,\nintegration and snapshot tests. Jest supports TypeScript via Babel. Due to the fact that\nTypeScript support in Babel is transpilation, to ensure that Jest will\ntype-check the tests as they are run we use\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/kulshekhar/ts-jest"}),"ts-jest"),"."),Object(r.b)("p",null,"To help that encourage good testing practices for React DOM testing, we are\nleveraging a helper library ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/"}),"react-testing-library"),"."),Object(r.b)("h3",{id:"java-application-unit-functional-and-smoke-testing"},"Java Application: Unit, functional and smoke testing"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html"}),"Mockito")," is been used to run Unit tests\nwhich enables mock creation, verification and stubbing."),Object(r.b)("p",null,"Unit-tests are mainly performed on controllers, services and DTO classes.Unit test code coverage by packages are done using\nJaCoCo plugin and Unit test reports are published using Surefire plugin."),Object(r.b)("p",null,"Cucumber framework is used in functional and smoke tests.Below steps needs to be followed to run the tests locally."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),'Ensure that the application is running on local: ./mvnw spring-boot:run\n\nOpen the \'stacks-java/api-tests\' path in the terminal\nExecute tests by run one of the following commands:\n\na. Run all tests: mvn clean verify\nb. Run Smoke tests only: mvn clean verify -Dcucumber.options="--tags @Smoke"\nc. Run Functional tests only: mvn clean verify -Dcucumber.options="--tags @Functional"\nd. Run tests by other tags and ignore tests that contain @Ignore tags: mvn clean verify verify -Dcucumber.options="--tags ~@Ignore --tags @YourTag"\n\nCheck the output report\nPlease use this path to find the generated test report:\n\nstacks-java/api-tests/target/site/serenity/index.html\n\n')),Object(r.b)("h3",{id:"scripts"},"Scripts"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm run test"),": To run all unit tests. This will also run any snapshot tests.\nSnapshots are to be checked in and are found in\n",Object(r.b)("inlineCode",{parentName:"p"},"[**snapshots**](__tests__/__snapshots__)"),"."),Object(r.b)("h2",{id:"cypress-functional-tests"},"Cypress: Functional tests"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Keywords: Functional automation, End to End, E2E")),Object(r.b)("p",null,"We are using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.cypress.io/"}),"Cypress")," for functional testing as much\nas possible. The key features of Cypress:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Integration testing with API testing support (Node.js)"),Object(r.b)("li",{parentName:"ul"},"Easy debugability (DOM snapshotting)"),Object(r.b)("li",{parentName:"ul"},"Selector playground"),Object(r.b)("li",{parentName:"ul"},"Great documentation"),Object(r.b)("li",{parentName:"ul"},"Best implementation of Live Reloading")),Object(r.b)("h3",{id:"why-cypress-is-categorised-in-the-pre-deployed-tests"},"Why Cypress is categorised in the pre-deployed tests"),Object(r.b)("p",null,"The Cypress tests, if structured correctly, can be run BEFORE the app client is deployed to an environment. This is to ensure that we get the fastest feedback we can. If you are following branching strategies such as GitFlow, then you can run these tests on your branch before merging to master."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"BENEFITS"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"DOWNSIDES"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"deployment independent"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"not full integration tests as not running on deployed infrastructure")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"faster feedback"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"run core tests before the branch is merged to master, smoke tests post-merge and deployment"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"how-cypress-is-run-in-continuous-integration-ci-pipelines"},"How Cypress is run in Continuous Integration (CI) pipelines"),Object(r.b)("p",null,"Glad you asked. You'll see an npm script in the ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," which uses ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/bahmutov/start-server-and-test"}),"start-server-and-test"),". This package starts the Node.js Express server, waits for the app URL (localhost in this case), then runs test command; when the tests end, it shuts down the server instance."),Object(r.b)("p",null,"Key benefits means we never have to explicitly wait for the server to be ready before testing."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"package.json script"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),'"test:cypress" : "env CI=true node_modules/.bin/start-server-and-test start $APP_BASE_URL:$PORT test:cypress:run"\n')),Object(r.b)("h3",{id:"how-to-use-cypress"},"How to use Cypress"),Object(r.b)("p",null,"Please read\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.cypress.io/guides/references/best-practices.html"}),"Cypress - Best Practices"),"\nfor how to get the most out of Cypress."),Object(r.b)("h3",{id:"how-to-use-cypress-while-developing"},"How to use Cypress while developing"),Object(r.b)("h4",{id:"server-side-rendered-ssr-apps"},"Server Side Rendered (SSR) apps"),Object(r.b)("p",null,"Say if you are following Test Driven Development (TDD) cycles, or if you wish to write a failing test for a known bug, and fix the app and check to ensure that the test passes, you may wish you watch the tests and the code together."),Object(r.b)("p",null,"To open and run Cypress locally with live reload, after installing dependencies:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Install app dependencies ",Object(r.b)("inlineCode",{parentName:"li"},"npm install")),Object(r.b)("li",{parentName:"ol"},"Build the web app ",Object(r.b)("inlineCode",{parentName:"li"},"npm run build")),Object(r.b)("li",{parentName:"ol"},"Compile the ",Object(r.b)("inlineCode",{parentName:"li"},"*.cy.ts")," Cypress test files ",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress:compile"),"\n(optional: pass ",Object(r.b)("inlineCode",{parentName:"li"},"--watch")," through to watch for changes)"),Object(r.b)("li",{parentName:"ol"},"Start the server, run the tests headless, tear down the server:\n",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress"),". When writing tests: Open Cypress with live-reloading\nand selector playground ",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress:open"))),Object(r.b)("h3",{id:"how-to-run-all-the-tests-without-keeping-the-server-running"},"How to run all the tests without keeping the server running"),Object(r.b)("h4",{id:"server-side-rendered-ssr-applications"},"Server Side Rendered (SSR) applications"),Object(r.b)("p",null,"To spin up the server automatically, then run Cypress in headless Chrome, use:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Script"),":"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm run test:cypress"),". This is the same script as mentioned for running in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#how-is-cypress-run-in-continuous-integration-ci-pipelines"}),"CI pipelines")),Object(r.b)("h3",{id:"where-tests-should-be-located"},"Where tests should be located"),Object(r.b)("p",null,"We suggest co-locating the ",Object(r.b)("inlineCode",{parentName:"p"},"*.cy.ts")," tests with the page compositions (a composition is several components that may come together to form a page). for high-level tests, and component tests with the components themselves."),Object(r.b)("p",null,"e.g."),Object(r.b)("p",null,"compositions\n\u251c\u2500\u2500 create\n\u2502   \u251c\u2500\u2500 index.test.cy.ts\n\u2502   \u2514\u2500\u2500 index.tsx\n\u2514\u2500\u2500 home\n\u251c\u2500\u2500 ",Object(r.b)("strong",{parentName:"p"},"snapshots"),"\n\u2502   \u2514\u2500\u2500 index.test.tsx.snap\n\u251c\u2500\u2500 components.tsx\n\u251c\u2500\u2500 index.axe.test.tsx\n\u251c\u2500\u2500 index.test.axe.cy.ts\n\u251c\u2500\u2500 index.test.cy.ts\n\u251c\u2500\u2500 index.test.eyes.cy.ts\n\u251c\u2500\u2500 index.test.tsx\n\u2514\u2500\u2500 index.tsx"),Object(r.b)("h3",{id:"how-to-configure-the-environments"},"How to configure the environments"),Object(r.b)("p",null,"We suggest tightly coupling Cypress with the app under test. This means sharing environment configuration files. This ensures that in your deployment pipelines, and quality gating process, you are confident that the app under test is being tested correctly."),Object(r.b)("p",null,"For example, if an API URL changes, you will only have a single place to change and the tests and app will be updated together."),Object(r.b)("p",null," Note that the environment variables are required on the hosting platform, e.g.\n",Object(r.b)("inlineCode",{parentName:"p"},"export NODE_ENV=dev")),Object(r.b)("h2",{id:"axe-accessibility-testing"},"Axe: Accessibility testing"),Object(r.b)("p",null,"From the Deque family of products, we are using\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.deque.com/axe/"}),"aXe")," for accessibility testing. When developing, we\nexpect to support WCAG 2.1 Level AA ",'["wcag21aa"]'," at a minimum."),Object(r.b)("p",null,"aXe tests are performed on two levels:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"first by rendering the React component and testing with Jest."),Object(r.b)("li",{parentName:"ol"},"second with Next rendering the entire page and testing with Cypress.")),Object(r.b)("p",null,"Both examples are in the scaffolded web app templates: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/amido/stacks-webapp-template/tree/master/packages/scaffolding-cli/templates/src/ssr"}),"https://github.com/amido/stacks-webapp-template/tree/master/packages/scaffolding-cli/templates/src/ssr")),Object(r.b)("h3",{id:"cypress-debugging-axe-failures"},"Cypress: Debugging Axe failures"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},'When accessibility violations are detected, your test will fail and an entry titled "A11Y ERROR!" will be added to the command log for each type of violation found (they will be above the failed assertion). Clicking on those will reveal more specifics about the error in the DevTools console.\nSource: ',Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/avanslaars/cypress-axe#standard-output"}),"cypress-axe#standard-output"))),Object(r.b)("p",null,"For information on how to fix the failure, follow the HelpUrl printed to the console."),Object(r.b)("h2",{id:"applitools-visual-tests"},"Applitools: Visual tests"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Keywords: visual regression testing, browser support, cross-browser")),Object(r.b)("p",null,"We are using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://applitools.com/"}),"Applitools")," with Cypress for visual testing. For Stacks, we are just using the free tier. But we suggest discussing your requirements and what this means for your team. The free tier only gives:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"1 user (normally the pipeline)"),Object(r.b)("li",{parentName:"ul"},"100 checkpoints per month")),Object(r.b)("p",null,"Eyes-Cypress ships with official type declarations for TypeScript. This allows\nyou to add eyes commands to your TypeScript tests. The configuration file has\nbeen added to the ",Object(r.b)("inlineCode",{parentName:"p"},"[tsconfig.cypress.json](./tsconfig.cypress.json)"),"."),Object(r.b)("h3",{id:"getting-started"},"Getting started"),Object(r.b)("p",null,"In order run Cypress with Applitools, you will need an ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://applitools.com/"}),"Applitools")," account. Once signed up (there is a free tier), the API key can be used to create a connection with Applitools."),Object(r.b)("p",null,"Please follow the incredible ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://applitools.com/tutorials/cypress.html"}),"Cypress Tutorial")," for how Applitools and Cypress go together like pumpkin and pie."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"export APPLITOOLS_API_KEY=")),Object(r.b)("h3",{id:"how-to-run-the-tests-locally"},"How to run the tests locally"),Object(r.b)("p",null,"To spin up the server locally, running Cypress headless, use:\n",Object(r.b)("inlineCode",{parentName:"p"},"npm run test:cypress:eyes"),". This is the same for running in CI pipelines."),Object(r.b)("h3",{id:"where-applitools-tests-should-be-located"},"Where Applitools tests should be located"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"*.test.eyes.cy.ts")," tests are located with the page compositions (a composition is several components that may come together to form a page)."),Object(r.b)("h2",{id:"static-analysis"},"Static analysis"),Object(r.b)("p",null,"There is support with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://sonarcloud.io/"}),"SonarCloud")," for static analysis."),Object(r.b)("p",null,"We can run this with Amido Stacks custom container, supports running Sonar Scanner for .NET and NPM projects."),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/repository/docker/amidostacks/ci-sonarscanner"}),"amidostacks/ci-sonarscanner"),"."),Object(r.b)("p",null,"This container make running static code analysis a breeze in the pipelines."),Object(r.b)("p",null,"To run, the export the followings environment variables for the\nSonarCloud Project:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"export SONAR_TOKEN=\nexport SONAR_PROJECT_KEY=\nexport SONAR_ORGANIZATION=\nexport BUILD_NUMBER=\n")),Object(r.b)("p",null,"To find this, please ensure that you sign up with GitHub to\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://sonarcloud.io"}),"Sonarcloud")," for the Organisation under test."),Object(r.b)("p",null,"First generate the code coverage results but running the unit tests, then run the SonarCloud scanner and\npush up the results for analysis."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm run test\ndocker run -e SONAR_HOST_URL=https://sonarcloud.io -e SONAR_TOKEN=$SONAR_TOKEN -e SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY -e SONAR_ORGANIZATION=$SONAR_ORGANIZATION -e BUILD_NUMBER=1.2.3 -v $(pwd):/usr/src --rm -it amidostacks/ci-sonarscanner /bin/bash -c 'cd /usr/src && sonar-scanner'\n")),Object(r.b)("h2",{id:"consumer-driven-contract-testing-with-pact"},"Consumer-Driven contract testing with Pact"),Object(r.b)("p",null,"Consumer-Driven Contract (CDC) Testing is a pattern that allows a consumer (i.e:\na client) and a provider (i.e. an API provider) to communicate using an agreed\ncontract (a pact)."),Object(r.b)("p",null,"The following documentation is an overview of the Pact implementation as part of the templated SSR web app. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/stacks/docs/packages/packages"}),"packages")," for a link to the source code."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: The ",Object(r.b)("inlineCode",{parentName:"em"},"beforeAll")," and ",Object(r.b)("inlineCode",{parentName:"em"},"afterAll")," hooks in Jest is not before all tests but\nbefore each file.")),Object(r.b)("h3",{id:"utilsutils"},Object(r.b)("inlineCode",{parentName:"h3"},"[Utils](./utils)")),Object(r.b)("p",null,"These are reusable components that can be used for any Javascript consumer setup with pact-js."),Object(r.b)("p",null,"We are using Jest to wrap pact-js to create the interactions and\ngenerate the Pacts for the web app as a consumer. Following the examples on\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pact-foundation/pact-js"}),"pact-js"),"."),Object(r.b)("p",null,"There is full documentation for how contract testing works available on the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.pact.io/how_pact_works"}),"Pact website"),"."),Object(r.b)("p",null,"A global 'provider' variable is set up in the ",Object(r.b)("inlineCode",{parentName:"p"},"[pactSetup.ts](./utils/pactSetup.ts)"),"\nfile. Then the ",Object(r.b)("inlineCode",{parentName:"p"},"[pactTestWrapper.ts](./utils/pactTestWrapper.ts)")," ensures each test\nfile will have the provider setup for them."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"pactFileWriteMode")," option been set to ",Object(r.b)("inlineCode",{parentName:"p"},"update")," in the provider that the\npacts append to. Please see\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.pact.io/implementation_guides/ruby/configuration#pactfile_write_mode"}),"pactFileWriteMode")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Export the Consumer and Provider names when running locally, or define in Azure Pipelines Library\nexport PACT_CONSUMER= \\\nexport PACT_PROVIDER=\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Generate and verify pacts against mock\nnpm run test:pact\n")),Object(r.b)("p",null,"Due to the afterAll hooks in Jest not invoking after all tests, but before each\nfile, there is a ",Object(r.b)("inlineCode",{parentName:"p"},"[pactPublish](./utils/pactPublish.ts)")," script to publish the\npacts to the configured broker."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Export broker credentials for running locally, or define in Azure Pipelines Library\nexport PACT_BROKER= \\\nexport PACT_BEARER_TOKEN= \\\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Publish the pacts to the configured broker\nnpm run test:pact-publish\n")),Object(r.b)("h3",{id:"pact-stub-service"},"Pact stub service"),Object(r.b)("p",null,"Pact contracts are easily turned into locally running API stubs. They are great\nfor use as a simple service to run integration tests against, whether with\nJest, or with Cypress. This ensures that you can test your application without\nhitting the actual endpoint, and ensures the same response every time, without\nduplicating mock definitions."),Object(r.b)("p",null,"If gives the consumer confidence that if the contract tests are passing with the\nprovider, then the mocks should suffice to test parts of their application\nagainst."),Object(r.b)("p",null,"No more updating stub responses that go out of date. Hooray!"),Object(r.b)("p",null,"The Pact files (.json) are generated when the Pact tests are run\n(",Object(r.b)("inlineCode",{parentName:"p"},"npm run tests:pact"),"), and are published to the broker on succeeding. To get the latest pact file to generate the stub service from, you can either:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Run the tests, which will output the Pact .json files to\n",Object(r.b)("inlineCode",{parentName:"li"},"[**tests**/pacts](./__tests__/pacts)")),Object(r.b)("li",{parentName:"ol"},"Pull down the latest passing contracts from the broker\n(",Object(r.b)("inlineCode",{parentName:"li"},"https://PACT_BROKER/pacts/provider/PROVIDER/consumer/CONSUMER/latest"),")")),Object(r.b)("p",null,"Once the files are sourced, it's as simple as starting the stub service either\nfrom the npm script in CI, or by calling the\n",Object(r.b)("inlineCode",{parentName:"p"},"[pactStubServer.ts](./pact/packStubServer.ts)")," from your test."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# To start the Pact stub server\nnpm run test:pact-start-stub\n")),Object(r.b)("p",null,"To test the server:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'# To test that the service is running and returning expected responses:\ncurl -v localhost:8389/v1/menu/e98583ad-0feb-4e48-9d4f-b20b09cb2633 -H "Accept: application/json"\n')),Object(r.b)("p",null,"Please remember to always stop your server once done testing."),Object(r.b)("h3",{id:"can-i-deploy"},"'Can I Deploy'"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.pact.io/pact_broker/can_i_deploy"}),"Can I Deploy")," tool ensures you are safe to deploy your application. Before deploying to a new environment, you need to know if the version is compatible with the provider version. Instead of checking the broker, we can poll the broker and check programmatically with the latest versions."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Run can I deploy using the pact-js SDK\n# This is called in the pipeline\nnpm run test:pact-can-i-deploy-ci\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Run can I deploy using the pact CLI\nnpm run test:pact-can-i-deploy-cli\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Example output:"),"\nThis demonstrates that the consumer is safe to deploy, and will return exit code 0 (this means yes!)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"INFO: Asking broker at https://amido-stacks.pact.dius.com.au if it is possible to deploy\n")),Object(r.b)("h3",{id:"pact-working-example"},"Pact working example"),Object(r.b)("p",null,"We have included a Pact test which will deploy to a PactFlow broker, and verify against the MenuAPI .NET API. This is to ensure that there is an example working test that can be used as a reference."),Object(r.b)("p",null,"Example ENV_VARS:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"export PACT_BEARER_TOKEN=\nexport PACT_BROKER=https://amido-stacks.pact.dius.com.au\nexport PACT_CONSUMER=GenericMenuConsumer\nexport PACT_PROVIDER=MenuAPI\n")),Object(r.b)("p",null,"Maintainers and contributors may obtain the ",Object(r.b)("inlineCode",{parentName:"p"},"PACT_BEARER_TOKEN")," if they request access to the PactFlow instance. Else, this will be run in the Azure DevOps Pipeline."),Object(r.b)("h4",{id:"tests"},"Tests"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"[get-menu-by-id.test.pact.ts](./get-menu-by-id.test.pact.ts)")," is an example test. This calls the ",Object(r.b)("inlineCode",{parentName:"p"},"[menuServive](./mocks/menuService.ts)")," Menu API when running locally."),Object(r.b)("p",null,"When the tests pass, the contract will be written to ",Object(r.b)("inlineCode",{parentName:"p"},"[pacts](./pacts/genericmenuconsumer-menuapi.json)"),", following the naming convention: ",Object(r.b)("inlineCode",{parentName:"p"},"<PACT_CONSUMER>-<PACT_PROVIDER>"),"."),Object(r.b)("p",null,"Some good practices:\n\u2705 Use Pact Matchers to ensure we account for state change, e.g. no hardcoded values for menus in the database, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.pact.io/getting_started/matching"}),"https://docs.pact.io/getting_started/matching")," for more information.\n\u2705 Ensure that the provider state has been configured by the Provider"),Object(r.b)("p",null,"It's important to get the ",Object(r.b)("inlineCode",{parentName:"p"},"PACT_CONSUMER")," and ",Object(r.b)("inlineCode",{parentName:"p"},"PACT_PROVIDER")," names correct, as these form the key for verify."),Object(r.b)("p",null,"\u26a0\ufe0f /pacts: these are checked in for reference only. Please do not change the outputted .json files. They are created on successful test runs by Pact. These will be published to the broker upon successful run in the pipeline, with the corresponding version tags."),Object(r.b)("h4",{id:"running-pact-for-java-application"},'Running "PACT" for Java Application'),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Prerequisite:"),"\nPlease provide the Pact_Broker_URL and Pact_Broker_Token to the provider's pom"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"    <pactBrokerUrl>Pact_Broker_URL</pactBrokerUrl>\n    <pactBrokerToken>Pact_Broker_Token</pactBrokerToken>\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Steps:")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"- Consumer: Creating the contract\n  Run the 'GenericMenuConsumer.java' class from the following path: api-tests/src/test/java/com/xxAMIDOxx/xxSTACKSxx/api/pact/GenericMenuConsumer.java\n\n  Note: this step can be skipped in case the pact file already exists in .pact/pacts directory.\n- Execute mvn pact:publish from 'api-tests' directory to publish the consumer pact to broker.\n- Execute mvn pact:verify from the provider (java directory).\n- Execute mvn pact:publish from 'java' directory to publish this pact to broker.\n- Execute mvn pact:can-i-deploy -Dpacticipant=YOUR_CONSUMER_NAME -DpacticipantVersion=CONSUMER_VERSION -Dto=ENV_TO_DEPLOY from 'java' directory including this variables: to check if the versions of consumer and provider are compatible.\n")))}p.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),s=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),p=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},h=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),h=a,d=b["".concat(i,".").concat(h)]||b[h]||u[h]||r;return n?s.a.createElement(d,o(o({ref:t},l),{},{components:n})):s.a.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);