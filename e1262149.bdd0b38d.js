(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var s=n(2),a=n(6),r=(n(0),n(123)),i={id:"testing",title:"Testing and Quality",sidebar_label:"Testing and quality",hide_table_of_contents:!1},o={unversionedId:"testing/testing",id:"testing/testing",isDocsHomePage:!1,title:"Testing and Quality",description:"Overview",source:"@site/docs/testing/testing.md",slug:"/testing/testing",permalink:"/stacks/docs/testing/testing",editUrl:"https://github.com/amido/stacks/docs/testing/testing.md",version:"current",sidebar_label:"Testing and quality",sidebar:"docs",previous:{title:"Pipeline Templates",permalink:"/stacks/docs/infrastructure/azure/pipeline_templates"},next:{title:"Project Types - Testing",permalink:"/stacks/docs/testing/cli_testing_frameworks"}},c=[{value:"Overview",id:"overview",children:[{value:"Pre-commit tests",id:"pre-commit-tests",children:[]},{value:"Pre-deployment tests",id:"pre-deployment-tests",children:[]},{value:"Post-deployment tests",id:"post-deployment-tests",children:[]}]},{value:"Quality gates",id:"quality-gates",children:[{value:"Jest: Unit, component and snapshot testing",id:"jest-unit-component-and-snapshot-testing",children:[]},{value:"Java Application: Unit, functional and smoke testing",id:"java-application-unit-functional-and-smoke-testing",children:[]},{value:"Scripts",id:"scripts",children:[]}]},{value:"Cypress: Functional tests",id:"cypress-functional-tests",children:[{value:"Why Cypress is categorised in the pre-deployed tests",id:"why-cypress-is-categorised-in-the-pre-deployed-tests",children:[]},{value:"How Cypress is run in Continuous Integration (CI) pipelines",id:"how-cypress-is-run-in-continuous-integration-ci-pipelines",children:[]},{value:"How to use Cypress",id:"how-to-use-cypress",children:[]},{value:"How to use Cypress while developing",id:"how-to-use-cypress-while-developing",children:[]},{value:"How to run all the tests without keeping the server running",id:"how-to-run-all-the-tests-without-keeping-the-server-running",children:[]},{value:"Where tests should be located",id:"where-tests-should-be-located",children:[]},{value:"How to configure the environments",id:"how-to-configure-the-environments",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Tests where possible will be written and delivered as part of the same branch and feature. Where this is not possible, in the event of using a standalone repo or the alternative, we expect the same development and code reviews standards to be upheld, and the branch naming to be aligned with the development branch name as possible."),Object(r.b)("h3",{id:"pre-commit-tests"},"Pre-commit tests"),Object(r.b)("p",null,"To be run on the local active develop branch, before commit. Before committing changes, we suggest enforcing and running pre-commit tests with a pre-commit hook."),Object(r.b)("h3",{id:"pre-deployment-tests"},"Pre-deployment tests"),Object(r.b)("p",null,"To be run on the active development branch.\nAfter which, we have two different processes, one for pre-deployment tests (unit, snapshot, integration), and another for post-deployment (functional tests).  Pre-deployment tests can run on the fly whilst coding. This is enabled by using a \u2018watch-mode\u2019 which will check for code changes, compile/trans-compile, and run the tests against the web app."),Object(r.b)("h3",{id:"post-deployment-tests"},"Post-deployment tests"),Object(r.b)("p",null,"To be run on master once the pull request (PR) has been approved and passed all pre-deployment tests."),Object(r.b)("h2",{id:"quality-gates"},"Quality gates"),Object(r.b)("p",null,"The following demonstrates the series of quality gates that the web app must pass through in order to successfully be deployed to a user facing environment (production)."),Object(r.b)("p",null,Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"https://www.lucidchart.com/publicSegments/view/2094f5d4-eaca-417c-a51e-36bf79853373/image.png",alt:"alt text",title:"Quality Gates"}))),Object(r.b)("h3",{id:"jest-unit-component-and-snapshot-testing"},"Jest: Unit, component and snapshot testing"),Object(r.b)("p",null,"We are using ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://jestjs.io/"}),"Jest")," for running all unit, component,\nintegration and snapshot tests. Jest supports TypeScript via Babel. Due to the fact that\nTypeScript support in Babel is transpilation, to ensure that Jest will\ntype-check the tests as they are run we use\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/kulshekhar/ts-jest"}),"ts-jest"),"."),Object(r.b)("p",null,"To help that encourage good testing practices for React DOM testing, we are\nleveraging a helper library ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://jestjs.io/"}),"react-testing-library"),"."),Object(r.b)("h3",{id:"java-application-unit-functional-and-smoke-testing"},"Java Application: Unit, functional and smoke testing"),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html"}),"Mockito")," is been used to run Unit tests\nwhich enables mock creation, verification and stubbing."),Object(r.b)("p",null,"Unit-tests are mainly performed on controllers, services and DTO classes.Unit test code coverage by packages are done using\nJaCoCo plugin and Unit test reports are published using Surefire plugin."),Object(r.b)("p",null,"Cucumber framework is used in functional and smoke tests.Below steps needs to be followed to run the tests locally."),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-text"}),'Ensure that the application is running on local: ./mvnw spring-boot:run\n\nOpen the \'stacks-java/api-tests\' path in the terminal\nExecute tests by run one of the following commands:\n\na. Run all tests: mvn clean verify\nb. Run Smoke tests only: mvn clean verify -Dcucumber.options="--tags @Smoke"\nc. Run Functional tests only: mvn clean verify -Dcucumber.options="--tags @Functional"\nd. Run tests by other tags and ignore tests that contain @Ignore tags: mvn clean verify verify -Dcucumber.options="--tags ~@Ignore --tags @YourTag"\n\nCheck the output report\nPlease use this path to find the generated test report:\n\nstacks-java/api-tests/target/site/serenity/index.html\n\n')),Object(r.b)("h3",{id:"scripts"},"Scripts"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm run test"),": To run all unit tests. This will also run any snapshot tests.\nSnapshots are to be checked in and are found in\n",Object(r.b)("inlineCode",{parentName:"p"},"[**snapshots**](__tests__/__snapshots__)"),"."),Object(r.b)("h2",{id:"cypress-functional-tests"},"Cypress: Functional tests"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Keywords: Functional automation, End to End, E2E")),Object(r.b)("p",null,"We are using ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://docs.cypress.io/"}),"Cypress")," for functional testing as much\nas possible. The key features of Cypress:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Integration testing with API testing support (Node.js)"),Object(r.b)("li",{parentName:"ul"},"Easy debugability (DOM snapshotting)"),Object(r.b)("li",{parentName:"ul"},"Selector playground"),Object(r.b)("li",{parentName:"ul"},"Great documentation"),Object(r.b)("li",{parentName:"ul"},"Best implementation of Live Reloading")),Object(r.b)("h3",{id:"why-cypress-is-categorised-in-the-pre-deployed-tests"},"Why Cypress is categorised in the pre-deployed tests"),Object(r.b)("p",null,"The Cypress tests, if structured correctly, can be run BEFORE the app client is deployed to an environment. This is to ensure that we get the fastest feedback we can. If you are following branching strategies such as GitFlow, then you can run these tests on your branch before merging to master."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"BENEFITS"),Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"DOWNSIDES"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"deployment independent"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"not full integration tests as not running on deployed infrastructure")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"faster feedback"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"run core tests before the branch is merged to master, smoke tests post-merge and deployment"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"how-cypress-is-run-in-continuous-integration-ci-pipelines"},"How Cypress is run in Continuous Integration (CI) pipelines"),Object(r.b)("p",null,"Glad you asked. You'll see an npm script in the ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," which uses ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/bahmutov/start-server-and-test"}),"start-server-and-test"),". This package starts the Node.js Express server, waits for the app URL (localhost in this case), then runs test command; when the tests end, it shuts down the server instance."),Object(r.b)("p",null,"Key benefits means we never have to explicitly wait for the server to be ready before testing."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"package.json script"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-text"}),'"test:cypress" : "env CI=true node_modules/.bin/start-server-and-test start $APP_BASE_URL:$PORT test:cypress:run"\n')),Object(r.b)("h3",{id:"how-to-use-cypress"},"How to use Cypress"),Object(r.b)("p",null,"Please read\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://docs.cypress.io/guides/references/best-practices.html"}),"Cypress - Best Practices"),"\nfor how to get the most out of Cypress."),Object(r.b)("h3",{id:"how-to-use-cypress-while-developing"},"How to use Cypress while developing"),Object(r.b)("h4",{id:"server-side-rendered-ssr-apps"},"Server Side Rendered (SSR) apps"),Object(r.b)("p",null,"Say if you are following Test Driven Development (TDD) cycles, or if you wish to write a failing test for a known bug, and fix the app and check to ensure that the test passes, you may wish you watch the tests and the code together."),Object(r.b)("p",null,"To open and run Cypress locally with live reload, after installing dependencies:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Install app dependencies ",Object(r.b)("inlineCode",{parentName:"li"},"npm install")),Object(r.b)("li",{parentName:"ol"},"Build the web app ",Object(r.b)("inlineCode",{parentName:"li"},"npm run build")),Object(r.b)("li",{parentName:"ol"},"Compile the ",Object(r.b)("inlineCode",{parentName:"li"},"*.cy.ts")," Cypress test files ",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress:compile"),"\n(optional: pass ",Object(r.b)("inlineCode",{parentName:"li"},"--watch")," through to watch for changes)"),Object(r.b)("li",{parentName:"ol"},"Start the server, run the tests headless, tear down the server:\n",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress"),". When writing tests: Open Cypress with live-reloading\nand selector playground ",Object(r.b)("inlineCode",{parentName:"li"},"npm run test:cypress:open"))),Object(r.b)("h3",{id:"how-to-run-all-the-tests-without-keeping-the-server-running"},"How to run all the tests without keeping the server running"),Object(r.b)("h4",{id:"server-side-rendered-ssr-applications"},"Server Side Rendered (SSR) applications"),Object(r.b)("p",null,"To spin up the server automatically, then run Cypress in headless Chrome, use:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Script"),":"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm run test:cypress"),". This is the same script as mentioned for running in ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#how-is-cypress-run-in-continuous-integration-ci-pipelines"}),"CI pipelines")),Object(r.b)("h3",{id:"where-tests-should-be-located"},"Where tests should be located"),Object(r.b)("p",null,"We suggest co-locating the ",Object(r.b)("inlineCode",{parentName:"p"},"*.cy.ts")," tests with the page compositions (a composition is several components that may come together to form a page). for high-level tests, and component tests with the components themselves."),Object(r.b)("p",null,"e.g."),Object(r.b)("p",null,"compositions\n\u251c\u2500\u2500 create\n\u2502   \u251c\u2500\u2500 index.test.cy.ts\n\u2502   \u2514\u2500\u2500 index.tsx\n\u2514\u2500\u2500 home\n\u251c\u2500\u2500 ",Object(r.b)("strong",{parentName:"p"},"snapshots"),"\n\u2502   \u2514\u2500\u2500 index.test.tsx.snap\n\u251c\u2500\u2500 components.tsx\n\u251c\u2500\u2500 index.axe.test.tsx\n\u251c\u2500\u2500 index.test.axe.cy.ts\n\u251c\u2500\u2500 index.test.cy.ts\n\u251c\u2500\u2500 index.test.eyes.cy.ts\n\u251c\u2500\u2500 index.test.tsx\n\u2514\u2500\u2500 index.tsx"),Object(r.b)("h3",{id:"how-to-configure-the-environments"},"How to configure the environments"),Object(r.b)("p",null,"We suggest tightly coupling Cypress with the app under test. This means sharing environment configuration files. This ensures that in your deployment pipelines, and quality gating process, you are confident that the app under test is being tested correctly."),Object(r.b)("p",null,"For example, if an API URL changes, you will only have a single place to change and the tests and app will be updated together."),Object(r.b)("p",null," Note that the environment variables are required on the hosting platform, e.g.\n",Object(r.b)("inlineCode",{parentName:"p"},"export NODE_ENV=dev")))}p.isMDXComponent=!0},123:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var s=n(0),a=n.n(s);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=s,h=u["".concat(i,".").concat(d)]||u[d]||b[d]||r;return n?a.a.createElement(h,o(o({ref:t},l),{},{components:n})):a.a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);